name: Python CI/CD Pipeline

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]
    paths:
      - 'ada_slope/**'
      - 'backend/**'
      - 'tests/**'
      - 'app.py'
      - 'pyproject.toml'
      - 'requirements.txt'
      - '.github/workflows/python-ci.yml'

env:
  PYTHON_VERSION: '3.11'

jobs:
  quality-checks:
    name: Code Quality & Type Checking
    runs-on: ubuntu-latest
    permissions:
      contents: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml', 'requirements.txt', 'backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install -r requirements.txt
          
      - name: Lint with Ruff
        run: ruff check . --output-format=github
        
      - name: Format check with Black
        run: black --check --diff .
        
      - name: Type check with MyPy
        run: mypy ada_slope backend/app --ignore-missing-imports --show-error-codes
        continue-on-error: true

  test-core:
    name: Test Core Library
    runs-on: ubuntu-latest
    needs: quality-checks
    permissions:
      contents: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml', 'requirements.txt') }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
          pip install -r requirements.txt
          
      - name: Test ada_slope core functions
        run: |
          pytest tests/test_processing.py -v \
            --cov=ada_slope \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junitxml=junit/test-results-core.xml
            
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: core
          name: ada-slope-core
          fail_ci_if_error: false
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-core
          path: junit/test-results-core.xml

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test-core
    permissions:
      contents: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml', 'requirements.txt', 'backend/requirements.txt') }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
          pip install -r requirements.txt
          pip install -r backend/requirements.txt
          
      - name: Test complete pipeline
        env:
          PYTHONPATH: ".:backend"
        run: |
          pytest tests/ -v \
            --cov=ada_slope \
            --cov=backend/app \
            --cov-report=xml \
            --cov-report=term-missing \
            --junitxml=junit/test-results-integration.xml
            
      - name: Upload integration coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: integration
          name: ada-slope-integration
          fail_ci_if_error: false

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run Bandit security scanner
        uses: securecodewarrior/github-action-bandit@v1
        with:
          config_file: 'pyproject.toml'
          output_format: 'sarif'
          output_file: 'bandit-report.sarif'
          
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'bandit-report.sarif'
